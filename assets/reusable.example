import { SvgChart } from 'd3kit';
import { scaleLinear, scaleOrdinal, schemeCategory10 } from 'd3-scale';
import { extent } from 'd3-array';

class SvgBubbleChart extends SvgChart {
  // Define the events that can be dispatched from this chart
  static getCustomEventNames() {
    return ['bubbleClick'];
  }

  constructor(selector, options) {
    super(selector, DEFAULT_OPTIONS, options);

    // Add custom variables
    this.xScale = scaleLinear();
    this.yScale = scaleLinear();
    this.color = scaleOrdinal(schemeCategory10);

    // Add basic event listeners
    this.visualize = this.visualize.bind(this);
    this.on('data.default', this.visualize);
    this.on('resize.default', this.visualize);
  }

  // You can define a new function for this class.
  visualize() {
    if(!this.hasData() return;

    const data = this.data();

    this.xScale.domain(extent(data, d => d.x))
      .range([0, this.getInnerWidth()]);
    this.yScale.domain(extent(data, d => d.y))
      .range([this.getInnerHeight(), 0]);

    const selection = this.rootG.selectAll('circle')
      .data(data);

    selection.exit().remove();

    const sEnter = selection.enter().append('circle')
      .attr('cx', d => this.xScale(d.x))
      .attr('cy', d => this.yScale(d.y))
      .on('click', (...args) => {
        this.dispatcher.apply('bubbleClick', this, args);
      });

    selection.merge(sEnter)
      .attr('cx', d => this.xScale(d.x))
      .attr('cy', d => this.yScale(d.y))
      .attr('r', d => d.r)
      .style('fill', (d,i) => this.color(i));
  }
}

// Define default options for this chart
const DEFAULT_OPTIONS = {
  margin: {top: 60, right: 60, bottom: 60, left: 60},
  initialWidth: 800,
  initialHeight: 460
};

SvgBubbleChart.DEFAULT_OPTIONS = DEFAULT_OPTIONS;

export default SvgBubbleChart;